from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from general import dp, session

from models.Recipe import Recipe


@dp.callback_query_handler(text="category_search_hint")
async def category_search_hint(callback: CallbackQuery) -> None:
    """
    Answer to callback category_search_hint. Gives user menu to choose category of recipe
    :param callback: Callback from TG
    :return: None
    """
    await callback.answer(cache_time=0)
    keyboard = InlineKeyboardMarkup() \
        .row(InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞–∫", callback_data="random_breakfast")) \
        .row(InlineKeyboardButton(text="–û–±–µ–¥", callback_data="random_lunch")) \
        .row(InlineKeyboardButton(text="–£–∂–∏–Ω", callback_data="random_dinner"))

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)


@dp.callback_query_handler(text="random_breakfast")
async def random_breakfast(callback: CallbackQuery) -> None:
    """
    Answer to callback random_breakfast. Sends back random recipe with "–ó–∞–≤—Ç—Ä–∞–∫" category
    :param callback: Callback from TG
    :return: None
    """
    result = session.query(Recipe).filter(Recipe.categories == "–∑–∞–≤—Ç—Ä–∞–∫").all()
    ans = "–ó–∞–≤—Ç—Ä–∞–∫ üç≥\n\n"
    for i in range(len(result)):
        ans += f'{i+1}. {result[i].get_name()}\n'
    if not result:
        await callback.message.answer("–†–µ—Ü–µ–ø—Ç—ã —Å —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ãüò£")
        return
    await callback.message.answer(ans)


@dp.callback_query_handler(text="random_lunch")
async def random_lunch(callback: CallbackQuery) -> None:
    """
    Answer to callback random_lunch. Sends back random recipe with "–û–±–µ–¥" category
    :param callback: Callback from TG
    :return: None
    """
    result = session.query(Recipe).filter(Recipe.categories == "–æ–±–µ–¥").all()
    ans = "–û–±–µ–¥ üç≤\n\n"
    for i in range(len(result)):
        ans += f'{i+1}. {result[i].get_name()}\n'
    if not result:
        await callback.message.answer("–†–µ—Ü–µ–ø—Ç—ã —Å —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ãüò£")
        return
    await callback.message.answer(ans)


@dp.callback_query_handler(text="random_dinner")
async def random_dinner(callback: CallbackQuery) -> None:
    """
    Answer to callback random_dinner. Sends back random recipe with "–£–∂–∏–Ω" category
    :param callback: Callback from TG
    :return: None
    """
    result = session.query(Recipe).filter(Recipe.categories == "—É–∂–∏–Ω").all()
    ans = "–£–∂–∏–Ω üçù\n\n"
    for i in range(len(result)):
        ans += f'{i+1}. {result[i].get_name()}\n'
    if not result:
        await callback.message.answer("–†–µ—Ü–µ–ø—Ç—ã —Å —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ãüò£")
        return
    await callback.message.answer(ans)
